{"version":3,"file":"static/js/189.93e7fe25.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.jsx","redux/Contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/ContactPerson/ContactPerson.styled.jsx","components/ContactPerson/ContactPerson.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  border: 2px solid;\n  padding: 20px;\n  width: 30%;\n  gap: 30px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: 10px;\n  width: 90%;\n  background-color: antiquewhite;\n`;\nexport const Error = styled(ErrorMessage)``;\n\nexport const AddButton = styled.button`\n  width: 150px;\n  background-color: #6262d8;\n  cursor: pointer;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\nexport const selectError = state => state.contacts.contacts.error;\nexport const selectFilter = state => state.filter.filter;\nexport const SelectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, statusFilter) => {\n    if (statusFilter) {\n      const normalizedFilter = statusFilter.toLowerCase();\n      return contacts.filter(item =>\n        item.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n    return contacts;\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\n\nimport { AddButton, Error, FormStyled, Input } from './ContactsForm.styled';\nimport { addContact } from 'redux/Contacts/operations';\nimport { selectContacts } from 'redux/Contacts/selectors';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().min(6).max(16).required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    if (\n      !contacts.some(\n        contact => contact.name === name || contact.number === number\n      )\n    ) {\n      values.id = nanoid();\n      dispatch(addContact(values));\n      resetForm();\n      console.log('New user');\n    } else {\n      console.log('Enter uniq date');\n    }\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled autoComplete=\"off\">\n        <label htmlFor=\"name\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <Error name=\"name\" />\n        </label>\n        <label htmlFor=\"number\">\n          Telephone\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <Error name=\"number\" />\n        </label>\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n// import styled from 'styled-components';\nimport Paper from '@mui/material/Paper';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const PersonStyled = styled(Paper)(() => ({\n  display: 'space-betwen',\n  width: '80%',\n  textAlign: 'center',\n  gap: '10px',\n  padding: '10px',\n  backgroundColor: '#7fb8f2',\n  color: '#fff',\n}));\nexport const DeleteButton = styled(DeleteIcon)(() => ({\n  cursor: 'pointer',\n}));\n// export const PersonStyled = styled.li`\n//   display: flex;\n//   gap: 10px;\n// `;\n\n// export const DeleteButton = styled.button`\n//   width: fit-content;\n//   background-color: #bb1414;\n//   cursor: pointer;\n// `;\n\n// const Item = styled(Paper)(({ theme }) => ({\n//   backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n//   ...theme.typography.body2,\n//   padding: theme.spacing(1),\n//   textAlign: 'center',\n//   color: theme.palette.text.secondary,\n// }));\n","import { useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { DeleteButton, PersonStyled } from './ContactPerson.styled';\nimport { deleteContact } from 'redux/Contacts/operations';\n\nexport const ContactPerson = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  return (\n    <PersonStyled spacing={2}>\n      <span>\n        {name}: {number}\n      </span>\n\n      <DeleteButton\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n      </DeleteButton>\n    </PersonStyled>\n  );\n};\n\nContactPerson.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useSelector } from 'react-redux';\n// import { ListContacts } from './ContactsList.styled';\n\nimport { ContactPerson } from 'components/ContactPerson/ContactPerson';\nimport { SelectVisibleContacts } from 'redux/Contacts/selectors';\n// import { List } from './ContactsList.styled';\nimport { Box } from '@mui/material';\n\nexport const ContactList = () => {\n  const list = useSelector(SelectVisibleContacts);\n\n  return (\n    <>\n      {list && (\n        <Box sx={{ width: '100%' }}>\n          {list.map(({ id, name, number }) => (\n            <ContactPerson key={id} id={id} name={name} number={number} />\n          ))}\n        </Box>\n      )}\n    </>\n  );\n};\n\n// return (\n//   <>\n//     {list && (\n//       <List>\n//         {list.map(({ id, name, number }) => (\n//           <ContactPerson key={id} id={id} name={name} number={number} />\n//         ))}\n//       </List>\n//     )}\n//   </>\n// );\n","import styled from 'styled-components';\n\nexport const FilterBlock = styled.div`\n  margin-top: 10px;\n  display: flex;\n  width: 20%;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from 'redux/Contacts/filterSlice';\nimport { selectFilter } from 'redux/Contacts/selectors';\n\nimport { FilterBlock } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <FilterBlock>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(setFilterValue(e.target.value))}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </FilterBlock>\n  );\n};\n","import { ContactForm } from 'components/ContactsForm/ContactsForm';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/Contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/Contacts/selectors';\n// import { useSelector } from 'react-redux';\n// import { SelectVisibleContacts } from 'redux/Contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {!isLoading && <ContactList />}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormStyled","styled","Form","Input","Field","Error","ErrorMessage","AddButton","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","SelectVisibleContacts","createSelector","statusFilter","normalizedFilter","toLowerCase","item","name","includes","schema","yup","shape","required","number","min","max","initialValues","ContactForm","useSelector","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","some","contact","console","log","id","nanoid","addContact","autoComplete","htmlFor","type","pattern","title","PersonStyled","Paper","display","width","textAlign","gap","padding","backgroundColor","color","DeleteButton","DeleteIcon","cursor","ContactPerson","spacing","onClick","deleteContact","ContactList","list","Box","sx","map","FilterBlock","Filter","value","onChange","e","setFilterValue","target","useEffect","fetchContacts","Helmet"],"sourceRoot":""}